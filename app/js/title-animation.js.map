{"version":3,"names":[],"mappings":"","sources":["title-animation.js"],"sourcesContent":["class TypographyBuilder {\n  constructor({\n    elementSelector = `.title-magic`,\n    timer = 350,\n    classForActivate = `showed`,\n    property = `transform`,\n    delay = 500,\n  } = {}) {\n    this.elementSelector = elementSelector;\n    this.timer = timer;\n    this.classForActivate = classForActivate;\n    this.property = property;\n    this.element = document.querySelector(this.elementSelector);\n    this.iterationCount = 0;\n    this.staticDelay = 0;\n    this.delay = delay;\n\n    this.prePareText();\n  }\n\n  _createElement(letter, delay) {\n    const span = document.createElement(`span`);\n\n    span.textContent = letter;\n    span.style.transition = `${this.property} ${this.timer}ms ease ${this.delay + delay}ms`;\n\n    return span;\n  }\n\n  get _delayCreator() {\n    if (this.iterationCount >= 3) {\n      this.iterationCount = 0;\n      this.staticDelay += 150;\n    }\n\n    this.iterationCount += 1;\n    switch (this.iterationCount) {\n      case 1:\n        return 50 + this.staticDelay;\n      case 3:\n        return 100 + this.staticDelay;\n      case 2:\n        return 150 + this.staticDelay;\n      default:\n        return 0;\n    }\n  }\n\n  prePareText() {\n    if (!this.element) {\n      return;\n    }\n\n    const text = this.element.textContent\n      .trim()\n      .split(` `)\n      .filter((latter) => latter !== ``);\n\n    const content = text.reduce((fragmentParent, word) => {\n      const wordElement = Array.from(word)\n        .reduce((fragment, latter) => {\n          fragment.appendChild(this._createElement(latter, this._delayCreator));\n          return fragment;\n        }, document.createDocumentFragment());\n\n      const wordContainer = document.createElement(`span`);\n\n      wordContainer.classList.add(`text__word`);\n      wordContainer.appendChild(wordElement);\n      fragmentParent.appendChild(wordContainer);\n\n      return fragmentParent;\n    }, document.createDocumentFragment());\n\n    this.element.innerHTML = ``;\n    this.element.appendChild(content);\n  }\n\n  run() {\n    if (!this.element) {\n      return;\n    }\n    this.element.classList.add(this.classForActivate);\n  }\n}\n\ndocument.addEventListener(`DOMContentLoaded`, () => {\n\n  document.body.classList.add(`endLoad`);\n\n const animationTopScreenTextLine = new TypographyBuilder({\n    elementSelector: `.title-magic`,\n  });\n\nanimationTopScreenTextLine.run();\n\n  });"],"file":"title-animation.js"}